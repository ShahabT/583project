package queryManager;

import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.concurrent.ArrayBlockingQueue;

class QueryPrefetcher extends Thread {
        static final boolean PREFETCH = false;

        ArrayBlockingQueue<String> queue = new ArrayBlockingQueue<String>(/* #QUERY_COUNT# */ + 1);
        final ArrayList<String> temp = new ArrayList<>();
        Statement statement;

        public QueryPrefetcher(Statement statement) {
                this.statement = statement;

        /* #QUERIES# */

                queue.add("END");
        }

        public void run() {
                System.out.println("PREFETCHING STARTED");
                while (true) {
                        if(statement==null)
                                break;

                        String sql = null;
                        try {
                                sql = queue.take();
                        } catch (InterruptedException e) {
                                System.out.println("PREFETCHER INTRUPTED");
                                break;
                        }

                        if (sql.equals("END")) {
                                break;
                        }

                        try {
                                System.out.println("PREFETCHING QUERY: " + sql);
                                this.statement.executeQuery(sql);
                        } catch (SQLException e) {
                                System.out.println("ERROR IN PREFETCHED QUERY...");
                                e.printStackTrace();
                        }

                        if (!temp.isEmpty()) {
                                try {
                                        Thread.sleep(10);
                                } catch (InterruptedException e) {
                                        e.printStackTrace();
                                }
                        }
                }
                System.out.println("PREFETCHING ENDED");
        }

        public void pause(String executed) {
                synchronized (temp) {
                        for (String sql : queue)
                                if(!sql.equals(executed))
                                        temp.add(sql);
                        queue.clear();
                }
        }

        public void go() {
                synchronized (temp) {
                        for (String sql : temp)
                                queue.add(sql);
                        temp.clear();
                }
        }

        public void close() throws SQLException {
                this.statement.close();
                this.statement=null;
        }
}
